/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.50
 * Generated at: 2020-04-07 03:36:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class postfind_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write(" <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write(".row {\r\n");
      out.write("\r\n");
      out.write("\tmargin: 0px auto;\r\n");
      out.write("\twidth: 500px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<!-- main과 별도이기 때문에 jquery 주소 받아오고(library import개념임) , 기능을 별도로 지정해 주면 된다  -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("/*\r\n");
      out.write(" \t= getter\r\n");
      out.write("   \t<input type=\"text\" id=\"id\">  ==> $('#id').val();  - 입력값\r\n");
      out.write("   \t<td>aaa</td>\t\t\t\t\t\t===> $('td').text();  - 사이값\r\n");
      out.write(" \t<td><span>aaa</span></td>\t==> $('td').html(); - 태그포함 사이값\r\n");
      out.write(" \t<a href=\"aaa\"> \t\t\t\t\t====> $('a').attr(\"href\")\r\n");
      out.write(" \r\n");
      out.write(" \t= setter\r\n");
      out.write(" \t<input type=\"text\" id=\"id\"> ==> $('#id').val('admin') - 값을 넣어달라구. \r\n");
      out.write(" \t$('td').append()\t   \t\t\t\t==> 값추가\r\n");
      out.write(" \t*/\r\n");
      out.write("\r\n");
      out.write("$(function(){ \r\n");
      out.write("\t$('#findBtn').click(function(){\r\n");
      out.write("\t\tvar dong=$('#dong').val();    // id=\"dong\"에 입력한 값을 가져와라\r\n");
      out.write("\t\tif(dong.trim()==\"\")\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\t$('#dong').focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//alert(dong);     \r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\t//.do?dong=신촌\t\r\n");
      out.write("\t\t\ttype:'POST',\r\n");
      out.write("\t\t\t// ★ ajax값을 넘길때, 창을 새로 만들어야지(postfind_result) 안그러면 내용 상속이 안되겠지...\r\n");
      out.write("\t\t\t//어디로 보낼것인지 , 파일명\r\n");
      out.write("\t\t\turl:'../member/postfind_result.do',\r\n");
      out.write("\t\t\t// 보낼 데이터 , 변수 (json방식으로 보내준다)\r\n");
      out.write("\t\t\tdata:{\"dong\":dong},\r\n");
      out.write("\t\t\t// 정상수행: 서버에서 읽어온 파일을 div에 넣어줘 | 실패\r\n");
      out.write("\t\t\tsuccess:function(result){\r\n");
      out.write("\t\t\t\t var div=$('#result').html(result);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror:function(e)\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\talert(e);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t<table class=\"table\">\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t입력: <input type=text  id=\"dong\" size=15 class=\"input-sm\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=button id=\"findBtn\" class=\"btn btn-sm btn-danger\" value=\"입력\">\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t<td class=\"text-right\">\r\n");
      out.write("\t\t\t\t\t\t\t<sub style=\"color:red\">※동/읍/면을 입력하세요</sub>\r\n");
      out.write("\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t<div id=\"result\"></div>\r\n");
      out.write("\t\t\t</div>\t\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
